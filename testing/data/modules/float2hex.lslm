// ATTRIBUTION_BEGIN
// This work uses content from the Second Life® Wiki article:
// http://wiki.secondlife.com/wiki/Float2Hex
// Copyright © 2008 Linden Research, Inc.
// Authors: Strife Onizuka, others 
// Licensed under the Creative Commons Attribution-Share Alike 3.0 License:
// http://creativecommons.org/licenses/by-sa/3.0
// See the complete license terms:
// http://creativecommons.org/licenses/by-sa/3.0/legalcode
// ATTRIBUTION_END
$module
// A note about the license... the code below asserts copyright and licensing under the the http://creativecomons.org/licenses/by/3.0/
// license, rather than the http://creativecommons.org/licenses/by-sa/3.0 license.
// according to the terms and conditions of the secondlife wike, all contributions are offered under the by-sa license, so my assumption
// is that license applies in spite of the text below.

string hexc="0123456789ABCDEF";//faster
 
string Float2Hex(float input)// LSLEditor Unsafe, LSO Safe, Mono Safe
{// Copyright Strife Onizuka, 2006-2007, LGPL, http://www.gnu.org/copyleft/lesser.html or (cc-by) http://creativecommons.org/licenses/by/3.0/
    if(input != (integer)input)//LL screwed up hex integers support in rotation & vector string typecasting
    {//this also keeps zero from hanging the zero stripper.
        float unsigned = llFabs(input);//logs don't work on negatives.
        integer exponent = llFloor((llLog(unsigned) / 0.69314718055994530941723212145818));//floor(log2(b)) + rounding error
 
        integer mantissa = (integer)((unsigned / llPow(2., exponent -= ((exponent >> 31) | 1))) * 0x4000000);//shift up into integer range
        integer index = (integer)(llLog(mantissa & -mantissa) / 0.69314718055994530941723212145818);//index of first 'on' bit
        string str = "p" + (string)(exponent + index - 26);
        mantissa = mantissa >> index;
        do
            str = llGetSubString(hexc, 15 & mantissa, 15 & mantissa) + str;
        while(mantissa = mantissa >> 4);
 
        if(input < 0)
            return "-0x" + str;
        return "0x" + str;
    }//integers pack well so anything that qualifies as an integer we dump as such, supports netative zero
    return llDeleteSubString((string)input,-7,-1);//trim off the float portion, return an integer
}