$module ()

// This is a Sim Event Handler.  It can be referenced in a Sim Project file, and will be used
// during the simulation to respond to particular kinds of events that can't be handled by
// 'normal' LSL scripts that reside within prims.  The simulator will call functions in this script
// to process particular events:
//     The Event                           The Function Called
//     ---------------------------------   --------------------
//     An HTTP Request is initiated		   httpRequest
//     An XML-RPC reply is produced        xmlReply
//     A Dialog is created                 dialog

// Any event handler function can produce its own events by setting the outEvents variable with a list
// of event parameters.  Multiple events can be put into a single list.  The list has the format
// [<event-name1>, param1, param2, ..., paramN, <event-name2>, param1, param2, ..., paramM, ...]
// where event-name1 is the name of an event with N parameters and event-name2 is the name of an
// event with M parameters. The only event type currently defined that can be generated is an
// XML request event (to exercise the XML-RPC functionality).  The event has the following format:
// 
// ["xml_request", source_tag, channel, idata, sdata, delay]
// where 
//     "source_tag" is a string, with any value you choose.  The XML reply from
//             this event (if any) will go to the xmlReply function defined in your
//             sim event handler (i.e. this script, see below).
//     "channel" is a key, identifying the xml-rpc channel.
//     "idata" is an integer, containing the integer payload of the request.
//     "sdata" is a string, containing the text payload of the request.
//     "delay" is a float, representing the number of seconds to delay before 'sending' the event.
//
//  A typical use of this would be:
//     a script sets up XML-RPC, and receives a channel.
//     the script issues an HTTP request to inform some server (as simulated by this event handler,
//     via the httpRequest handler function, below) of the XML-RPC channel to use.
//     The httpRequest replies to the request normally, and also issues an xml_request, perhaps with
//     some delay.  The reply from this request goes to the xmlReply function in this handler module,
//     which can issue further xml-request events if it so chooses.
 
list outEvents = [];

// the following declarations comprise the httpRequest interface.  The 'out' variables store the 
// reply values (status, body, and metadata) for the http request.  The function return value
// should be the empty string to mean 'no errors occurred', or some error message, if there was
// a problem in processing the request.  All event handler function follow this pattern: global
// variables named 'outxxx' for outputs from the event handler, empty string return value to indicate
// successful processing of the event, and non-empty string to indicate an error.

// In addition to the 'out' global variables, you may add your own global variables to keep track
// of information between events.
integer outHttpStatus;  // http status code (e.g. 200 for ok)
string outHttpBody;     // the body of the reply
list outHttpMetadata;   // a list of strings
string httpRequest(string url, string method, string mimetype, integer maxlength, integer verify, string body) {
    return "not implemented";
}

// The following declarations comprise the xmlReply interface. Other than possible events generated (see
// above) the xmlReply handler doesn't have any outputs.

string xmlReply(string source_tag, key channel, string sdata, integer idata) {
    return "not implemented";
}

// The following declarations comprise the dialog interface.  The dialog function can indicate which
// button is selected by setting outDialogButtonSelected to the index of the button to select.  Setting
// outDialogButtonSelected to an out-of-range value (<0 or >= length of buttons list) is equivalent
// to ignoring the dialog.

integer outDialogButtonSelected;
string dialog(string avatarName, string message, list buttons, integer channel, string objectName) {
    return "not implemented";
}
 